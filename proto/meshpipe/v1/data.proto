syntax = "proto3";

package meshpipe.v1;

option go_package = "github.com/aminovpavel/meshpipe-go/internal/api/grpc/gen/v1;grpcv1";

import "google/protobuf/timestamp.proto";

message DashboardRequest {
  string gateway_id = 1;
}

message PacketTypeCount {
  string portnum_name = 1;
  uint64 count = 2;
}

message DashboardResponse {
  uint64 total_nodes = 1;
  uint64 total_packets = 2;
  uint64 active_nodes_24h = 3;
  uint64 recent_packets = 4;
  double avg_rssi = 5;
  double avg_snr = 6;
  double success_rate = 7;
  repeated PacketTypeCount packet_types = 8;
}

message Pagination {
  uint32 page_size = 1;
  string cursor = 2;
}

message PacketFilter {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  string gateway_id = 3;
  uint32 from_node_id = 4;
  uint32 to_node_id = 5;
  repeated string portnum_names = 6;
  string channel_id = 7;
  int32 hop_count = 8;
  string search = 9;
}

message Packet {
  uint64 id = 1;
  google.protobuf.Timestamp timestamp = 2;
  uint32 from_node_id = 3;
  uint32 to_node_id = 4;
  string portnum_name = 5;
  string gateway_id = 6;
  string channel_id = 7;
  int32 hop_start = 8;
  int32 hop_limit = 9;
  int32 hop_count = 10;
  sint32 rssi = 11;
  double snr = 12;
  uint32 mesh_packet_id = 13;
  bool processed_successfully = 14;
  uint32 payload_length = 15;
  bytes raw_payload = 16;
}

message ListPacketsRequest {
  PacketFilter filter = 1;
  Pagination pagination = 2;
  bool include_payload = 3;
}

message ListPacketsResponse {
  repeated Packet packets = 1;
  string next_cursor = 2;
}

message NodeFilter {
  string search = 1;
  string role = 2;
  string hardware_model = 3;
  string primary_channel = 4;
  bool named_only = 5;
}

message Node {
  uint32 node_id = 1;
  string hex_id = 2;
  string display_name = 3;
  string long_name = 4;
  string short_name = 5;
  string hardware_model = 6;
  string hardware_model_name = 7;
  string role = 8;
  string role_name = 9;
  string region = 10;
  string region_name = 11;
  string modem_preset = 12;
  string modem_preset_name = 13;
  google.protobuf.Timestamp first_seen = 14;
  google.protobuf.Timestamp last_seen = 15;
  double avg_rssi = 16;
  double avg_snr = 17;
  double avg_hops = 18;
  uint64 total_packets = 19;
  uint32 unique_gateways = 20;
  uint32 unique_destinations = 21;
}

message ListNodesRequest {
  NodeFilter filter = 1;
  Pagination pagination = 2;
}

message ListNodesResponse {
  repeated Node nodes = 1;
  string next_cursor = 2;
  uint64 total = 3;
}

message GetNodeRequest {
  uint32 node_id = 1;
}

message GetNodeResponse {
  Node node = 1;
}

message GatewayFilter {
  string gateway_id = 1;
}

message GatewayStat {
  string gateway_id = 1;
  uint64 packets_total = 2;
  uint32 distinct_nodes = 3;
  google.protobuf.Timestamp first_seen = 4;
  google.protobuf.Timestamp last_seen = 5;
  double avg_rssi = 6;
  double avg_snr = 7;
}

message GatewayStatsResponse {
  repeated GatewayStat stats = 1;
}

message LinkFilter {
  string gateway_id = 1;
  string channel_id = 2;
  uint32 from_node_id = 3;
  uint32 to_node_id = 4;
}

message LinkAggregate {
  string gateway_id = 1;
  string channel_id = 2;
  uint32 from_node_id = 3;
  uint32 to_node_id = 4;
  uint64 packets_total = 5;
  google.protobuf.Timestamp first_seen = 6;
  google.protobuf.Timestamp last_seen = 7;
  double avg_rssi = 8;
  double avg_snr = 9;
  uint32 max_hop_index = 10;
  uint32 max_hop_limit = 11;
}

message ListLinksRequest {
  LinkFilter filter = 1;
  Pagination pagination = 2;
}

message ListLinksResponse {
  repeated LinkAggregate links = 1;
  string next_cursor = 2;
}

message TracerouteFilter {
  uint32 origin_node_id = 1;
  uint32 destination_node_id = 2;
  string gateway_id = 3;
}

message TraceroutePath {
  uint32 origin_node_id = 1;
  uint32 destination_node_id = 2;
  string gateway_id = 3;
  uint32 max_hops = 4;
  uint64 observations = 5;
  google.protobuf.Timestamp first_seen = 6;
  google.protobuf.Timestamp last_seen = 7;
}

message ListTraceroutesRequest {
  TracerouteFilter filter = 1;
  Pagination pagination = 2;
}

message ListTraceroutesResponse {
  repeated TraceroutePath paths = 1;
  string next_cursor = 2;
}

message RangeTestFilter {
  uint32 from_node_id = 1;
  uint32 to_node_id = 2;
  string gateway_id = 3;
}

message RangeTestResult {
  uint64 packet_id = 1;
  uint32 from_node_id = 2;
  uint32 to_node_id = 3;
  string gateway_id = 4;
  google.protobuf.Timestamp received_at = 5;
  sint32 rssi = 6;
  double snr = 7;
  uint32 hop_limit = 8;
  uint32 hop_start = 9;
  bytes payload = 10;
}

message ListRangeTestsRequest {
  RangeTestFilter filter = 1;
  Pagination pagination = 2;
}

message ListRangeTestsResponse {
  repeated RangeTestResult results = 1;
  string next_cursor = 2;
}

message StoreForwardEvent {
  uint64 packet_id = 1;
  google.protobuf.Timestamp received_at = 2;
  string gateway_id = 3;
  string variant = 4;
  bytes payload = 5;
}

message ListStoreForwardRequest {
  string gateway_id = 1;
  Pagination pagination = 2;
}

message ListStoreForwardResponse {
  repeated StoreForwardEvent events = 1;
  string next_cursor = 2;
}

message PaxcounterSample {
  uint64 packet_id = 1;
  google.protobuf.Timestamp received_at = 2;
  string gateway_id = 3;
  uint32 wifi = 4;
  uint32 ble = 5;
  uint32 uptime_seconds = 6;
}

message ListPaxcounterRequest {
  string gateway_id = 1;
  Pagination pagination = 2;
}

message ListPaxcounterResponse {
  repeated PaxcounterSample samples = 1;
  string next_cursor = 2;
}

service MeshpipeData {
  rpc GetDashboardStats(DashboardRequest) returns (DashboardResponse);
  rpc ListPackets(ListPacketsRequest) returns (ListPacketsResponse);
  rpc StreamPackets(ListPacketsRequest) returns (stream Packet);
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse);
  rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
  rpc GetGatewayStats(GatewayFilter) returns (GatewayStatsResponse);
  rpc ListLinks(ListLinksRequest) returns (ListLinksResponse);
  rpc ListTraceroutes(ListTraceroutesRequest) returns (ListTraceroutesResponse);
  rpc ListRangeTests(ListRangeTestsRequest) returns (ListRangeTestsResponse);
  rpc ListStoreForward(ListStoreForwardRequest) returns (ListStoreForwardResponse);
  rpc ListPaxcounter(ListPaxcounterRequest) returns (ListPaxcounterResponse);
}
