// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: meshpipe/v1/data.proto

package grpcv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeshpipeData_GetDashboardStats_FullMethodName = "/meshpipe.v1.MeshpipeData/GetDashboardStats"
	MeshpipeData_ListPackets_FullMethodName       = "/meshpipe.v1.MeshpipeData/ListPackets"
	MeshpipeData_StreamPackets_FullMethodName     = "/meshpipe.v1.MeshpipeData/StreamPackets"
	MeshpipeData_ListNodes_FullMethodName         = "/meshpipe.v1.MeshpipeData/ListNodes"
	MeshpipeData_GetNode_FullMethodName           = "/meshpipe.v1.MeshpipeData/GetNode"
	MeshpipeData_GetGatewayStats_FullMethodName   = "/meshpipe.v1.MeshpipeData/GetGatewayStats"
	MeshpipeData_ListLinks_FullMethodName         = "/meshpipe.v1.MeshpipeData/ListLinks"
	MeshpipeData_ListTraceroutes_FullMethodName   = "/meshpipe.v1.MeshpipeData/ListTraceroutes"
	MeshpipeData_ListRangeTests_FullMethodName    = "/meshpipe.v1.MeshpipeData/ListRangeTests"
	MeshpipeData_ListStoreForward_FullMethodName  = "/meshpipe.v1.MeshpipeData/ListStoreForward"
	MeshpipeData_ListPaxcounter_FullMethodName    = "/meshpipe.v1.MeshpipeData/ListPaxcounter"
)

// MeshpipeDataClient is the client API for MeshpipeData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeshpipeDataClient interface {
	GetDashboardStats(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardResponse, error)
	ListPackets(ctx context.Context, in *ListPacketsRequest, opts ...grpc.CallOption) (*ListPacketsResponse, error)
	StreamPackets(ctx context.Context, in *ListPacketsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Packet], error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	GetGatewayStats(ctx context.Context, in *GatewayFilter, opts ...grpc.CallOption) (*GatewayStatsResponse, error)
	ListLinks(ctx context.Context, in *ListLinksRequest, opts ...grpc.CallOption) (*ListLinksResponse, error)
	ListTraceroutes(ctx context.Context, in *ListTraceroutesRequest, opts ...grpc.CallOption) (*ListTraceroutesResponse, error)
	ListRangeTests(ctx context.Context, in *ListRangeTestsRequest, opts ...grpc.CallOption) (*ListRangeTestsResponse, error)
	ListStoreForward(ctx context.Context, in *ListStoreForwardRequest, opts ...grpc.CallOption) (*ListStoreForwardResponse, error)
	ListPaxcounter(ctx context.Context, in *ListPaxcounterRequest, opts ...grpc.CallOption) (*ListPaxcounterResponse, error)
}

type meshpipeDataClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshpipeDataClient(cc grpc.ClientConnInterface) MeshpipeDataClient {
	return &meshpipeDataClient{cc}
}

func (c *meshpipeDataClient) GetDashboardStats(ctx context.Context, in *DashboardRequest, opts ...grpc.CallOption) (*DashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DashboardResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_GetDashboardStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshpipeDataClient) ListPackets(ctx context.Context, in *ListPacketsRequest, opts ...grpc.CallOption) (*ListPacketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPacketsResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_ListPackets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshpipeDataClient) StreamPackets(ctx context.Context, in *ListPacketsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Packet], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MeshpipeData_ServiceDesc.Streams[0], MeshpipeData_StreamPackets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListPacketsRequest, Packet]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshpipeData_StreamPacketsClient = grpc.ServerStreamingClient[Packet]

func (c *meshpipeDataClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshpipeDataClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshpipeDataClient) GetGatewayStats(ctx context.Context, in *GatewayFilter, opts ...grpc.CallOption) (*GatewayStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GatewayStatsResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_GetGatewayStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshpipeDataClient) ListLinks(ctx context.Context, in *ListLinksRequest, opts ...grpc.CallOption) (*ListLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLinksResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_ListLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshpipeDataClient) ListTraceroutes(ctx context.Context, in *ListTraceroutesRequest, opts ...grpc.CallOption) (*ListTraceroutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTraceroutesResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_ListTraceroutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshpipeDataClient) ListRangeTests(ctx context.Context, in *ListRangeTestsRequest, opts ...grpc.CallOption) (*ListRangeTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRangeTestsResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_ListRangeTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshpipeDataClient) ListStoreForward(ctx context.Context, in *ListStoreForwardRequest, opts ...grpc.CallOption) (*ListStoreForwardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoreForwardResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_ListStoreForward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshpipeDataClient) ListPaxcounter(ctx context.Context, in *ListPaxcounterRequest, opts ...grpc.CallOption) (*ListPaxcounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaxcounterResponse)
	err := c.cc.Invoke(ctx, MeshpipeData_ListPaxcounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshpipeDataServer is the server API for MeshpipeData service.
// All implementations must embed UnimplementedMeshpipeDataServer
// for forward compatibility.
type MeshpipeDataServer interface {
	GetDashboardStats(context.Context, *DashboardRequest) (*DashboardResponse, error)
	ListPackets(context.Context, *ListPacketsRequest) (*ListPacketsResponse, error)
	StreamPackets(*ListPacketsRequest, grpc.ServerStreamingServer[Packet]) error
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	GetGatewayStats(context.Context, *GatewayFilter) (*GatewayStatsResponse, error)
	ListLinks(context.Context, *ListLinksRequest) (*ListLinksResponse, error)
	ListTraceroutes(context.Context, *ListTraceroutesRequest) (*ListTraceroutesResponse, error)
	ListRangeTests(context.Context, *ListRangeTestsRequest) (*ListRangeTestsResponse, error)
	ListStoreForward(context.Context, *ListStoreForwardRequest) (*ListStoreForwardResponse, error)
	ListPaxcounter(context.Context, *ListPaxcounterRequest) (*ListPaxcounterResponse, error)
	mustEmbedUnimplementedMeshpipeDataServer()
}

// UnimplementedMeshpipeDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeshpipeDataServer struct{}

func (UnimplementedMeshpipeDataServer) GetDashboardStats(context.Context, *DashboardRequest) (*DashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboardStats not implemented")
}
func (UnimplementedMeshpipeDataServer) ListPackets(context.Context, *ListPacketsRequest) (*ListPacketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackets not implemented")
}
func (UnimplementedMeshpipeDataServer) StreamPackets(*ListPacketsRequest, grpc.ServerStreamingServer[Packet]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPackets not implemented")
}
func (UnimplementedMeshpipeDataServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedMeshpipeDataServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedMeshpipeDataServer) GetGatewayStats(context.Context, *GatewayFilter) (*GatewayStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayStats not implemented")
}
func (UnimplementedMeshpipeDataServer) ListLinks(context.Context, *ListLinksRequest) (*ListLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinks not implemented")
}
func (UnimplementedMeshpipeDataServer) ListTraceroutes(context.Context, *ListTraceroutesRequest) (*ListTraceroutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTraceroutes not implemented")
}
func (UnimplementedMeshpipeDataServer) ListRangeTests(context.Context, *ListRangeTestsRequest) (*ListRangeTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRangeTests not implemented")
}
func (UnimplementedMeshpipeDataServer) ListStoreForward(context.Context, *ListStoreForwardRequest) (*ListStoreForwardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoreForward not implemented")
}
func (UnimplementedMeshpipeDataServer) ListPaxcounter(context.Context, *ListPaxcounterRequest) (*ListPaxcounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaxcounter not implemented")
}
func (UnimplementedMeshpipeDataServer) mustEmbedUnimplementedMeshpipeDataServer() {}
func (UnimplementedMeshpipeDataServer) testEmbeddedByValue()                      {}

// UnsafeMeshpipeDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshpipeDataServer will
// result in compilation errors.
type UnsafeMeshpipeDataServer interface {
	mustEmbedUnimplementedMeshpipeDataServer()
}

func RegisterMeshpipeDataServer(s grpc.ServiceRegistrar, srv MeshpipeDataServer) {
	// If the following call pancis, it indicates UnimplementedMeshpipeDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeshpipeData_ServiceDesc, srv)
}

func _MeshpipeData_GetDashboardStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).GetDashboardStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_GetDashboardStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).GetDashboardStats(ctx, req.(*DashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshpipeData_ListPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPacketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).ListPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_ListPackets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).ListPackets(ctx, req.(*ListPacketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshpipeData_StreamPackets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPacketsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshpipeDataServer).StreamPackets(m, &grpc.GenericServerStream[ListPacketsRequest, Packet]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MeshpipeData_StreamPacketsServer = grpc.ServerStreamingServer[Packet]

func _MeshpipeData_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshpipeData_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshpipeData_GetGatewayStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).GetGatewayStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_GetGatewayStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).GetGatewayStats(ctx, req.(*GatewayFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshpipeData_ListLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).ListLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_ListLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).ListLinks(ctx, req.(*ListLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshpipeData_ListTraceroutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTraceroutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).ListTraceroutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_ListTraceroutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).ListTraceroutes(ctx, req.(*ListTraceroutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshpipeData_ListRangeTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRangeTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).ListRangeTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_ListRangeTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).ListRangeTests(ctx, req.(*ListRangeTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshpipeData_ListStoreForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).ListStoreForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_ListStoreForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).ListStoreForward(ctx, req.(*ListStoreForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshpipeData_ListPaxcounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaxcounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshpipeDataServer).ListPaxcounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeshpipeData_ListPaxcounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshpipeDataServer).ListPaxcounter(ctx, req.(*ListPaxcounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeshpipeData_ServiceDesc is the grpc.ServiceDesc for MeshpipeData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeshpipeData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshpipe.v1.MeshpipeData",
	HandlerType: (*MeshpipeDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDashboardStats",
			Handler:    _MeshpipeData_GetDashboardStats_Handler,
		},
		{
			MethodName: "ListPackets",
			Handler:    _MeshpipeData_ListPackets_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _MeshpipeData_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _MeshpipeData_GetNode_Handler,
		},
		{
			MethodName: "GetGatewayStats",
			Handler:    _MeshpipeData_GetGatewayStats_Handler,
		},
		{
			MethodName: "ListLinks",
			Handler:    _MeshpipeData_ListLinks_Handler,
		},
		{
			MethodName: "ListTraceroutes",
			Handler:    _MeshpipeData_ListTraceroutes_Handler,
		},
		{
			MethodName: "ListRangeTests",
			Handler:    _MeshpipeData_ListRangeTests_Handler,
		},
		{
			MethodName: "ListStoreForward",
			Handler:    _MeshpipeData_ListStoreForward_Handler,
		},
		{
			MethodName: "ListPaxcounter",
			Handler:    _MeshpipeData_ListPaxcounter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPackets",
			Handler:       _MeshpipeData_StreamPackets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "meshpipe/v1/data.proto",
}
